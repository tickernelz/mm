name: Test Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-build:
    name: Test Build - ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test builds for macOS only
          - os: macos
            runner: macos-13
            arch: x86_64
            
          - os: macos
            runner: macos-14  # Apple Silicon
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install PyInstaller

      - name: Create resources directory and icon
        run: |
          mkdir -p src/mm/resources
          python -c "
          try:
              from PIL import Image, ImageDraw
              import subprocess
              import sys
              from pathlib import Path
              
              # Create a simple icon
              size = 512
              img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
              draw = ImageDraw.Draw(img)
              
              # Draw a simple mouse cursor
              draw.ellipse([50, 50, size-50, size-200], fill=(100, 150, 255, 255), outline=(0, 0, 0, 255), width=5)
              draw.rectangle([size//2-10, 50, size//2+10, 150], fill=(0, 0, 0, 255))
              
              # Save as PNG first
              icon_path = Path('src/mm/resources/icon.icns')
              png_path = icon_path.with_suffix('.png')
              img.save(png_path)
              
              if sys.platform == 'darwin':
                  try:
                      subprocess.run(['sips', '-s', 'format', 'icns', str(png_path), '--out', str(icon_path)], check=True)
                      png_path.unlink()
                      print(f'Created icon: {icon_path}')
                  except subprocess.CalledProcessError:
                      png_path.rename(icon_path.with_suffix('.png'))
                      print(f'Created PNG icon: {icon_path.with_suffix(\".png\")}')
              else:
                  png_path.rename(icon_path.with_suffix('.png'))
                  print(f'Created PNG icon: {icon_path.with_suffix(\".png\")}')
                      
          except ImportError:
              print('PIL not available, creating placeholder')
              with open('src/mm/resources/icon.txt', 'w') as f:
                  f.write('Icon placeholder')
          "

      - name: Test build
        run: |
          python -m PyInstaller --clean --noconfirm MouseMover.spec

      - name: Verify build output
        run: |
          ls -la dist/
          if [ -d "dist/telek.app" ]; then
            echo "✅ macOS app bundle created successfully"
            echo "App bundle contents:"
            ls -la dist/telek.app/Contents/MacOS/
          else
            echo "❌ macOS app bundle not found"
            exit 1
          fi

      - name: Upload build artifacts (for debugging)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/
            build/
          retention-days: 7