name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - os: macos
            runner: macos-latest
            arch: x86_64
            build_cmd: |
              python -m PyInstaller --clean --noconfirm MouseMover.spec
              cd dist && zip -r telek-macos-x86_64.zip telek.app/
            artifact_name: telek-macos-x86_64.zip
            artifact_path: dist/telek-macos-x86_64.zip
            content_type: application/zip
            
          - os: macos
            runner: macos-14  # Apple Silicon runner
            arch: arm64
            build_cmd: |
              python -m PyInstaller --clean --noconfirm MouseMover.spec
              cd dist && zip -r telek-macos-arm64.zip telek.app/
            artifact_name: telek-macos-arm64.zip
            artifact_path: dist/telek-macos-arm64.zip
            content_type: application/zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install PyInstaller

      - name: Create resources directory and icon
        run: |
          mkdir -p src/mm/resources
          python -c "
          try:
              from PIL import Image, ImageDraw
              import subprocess
              import sys
              from pathlib import Path
              
              # Create a simple icon
              size = 512
              img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
              draw = ImageDraw.Draw(img)
              
              # Draw a simple mouse cursor
              draw.ellipse([50, 50, size-50, size-200], fill=(100, 150, 255, 255), outline=(0, 0, 0, 255), width=5)
              draw.rectangle([size//2-10, 50, size//2+10, 150], fill=(0, 0, 0, 255))
              
              # Save as PNG first
              icon_path = Path('src/mm/resources/icon.icns')
              png_path = icon_path.with_suffix('.png')
              img.save(png_path)
              
              if sys.platform == 'darwin':
                  try:
                      subprocess.run(['sips', '-s', 'format', 'icns', str(png_path), '--out', str(icon_path)], check=True)
                      png_path.unlink()
                      print(f'Created icon: {icon_path}')
                  except subprocess.CalledProcessError:
                      png_path.rename(icon_path.with_suffix('.png'))
                      print(f'Created PNG icon: {icon_path.with_suffix(\".png\")}')
              else:
                  png_path.rename(icon_path.with_suffix('.png'))
                  print(f'Created PNG icon: {icon_path.with_suffix(\".png\")}')
                      
          except ImportError:
              print('PIL not available, creating placeholder')
              with open('src/mm/resources/icon.txt', 'w') as f:
                  f.write('Icon placeholder')
          "

      - name: Update spec file for macOS
        run: |
          python -c "
          import sys
          from pathlib import Path
          
          spec_content = Path('MouseMover.spec').read_text()
          
          # Update icon path for macOS
          if Path('src/mm/resources/icon.icns').exists():
              icon_line = 'icon=str(src_dir / \"mm\" / \"resources\" / \"icon.icns\")'
          else:
              icon_line = 'icon=str(src_dir / \"mm\" / \"resources\" / \"icon.png\") if (src_dir / \"mm\" / \"resources\" / \"icon.png\").exists() else None'
          
          # Replace icon line in spec
          lines = spec_content.split('\n')
          for i, line in enumerate(lines):
              if 'icon=' in line and 'src_dir' in line:
                  lines[i] = '    ' + icon_line + ','
          
          Path('MouseMover.spec').write_text('\n'.join(lines))
          "

      - name: Build application
        run: ${{ matrix.build_cmd }}

      - name: Verify build output
        run: |
          ls -la dist/
          if [ -f "${{ matrix.artifact_path }}" ]; then
            echo "‚úÖ Build artifact created successfully: ${{ matrix.artifact_path }}"
            if [[ "${{ matrix.artifact_path }}" == *".exe" ]] || [[ "${{ matrix.artifact_path }}" == *"linux"* ]]; then
              file "${{ matrix.artifact_path }}" || true
            fi
          else
            echo "‚ùå Build artifact not found: ${{ matrix.artifact_path }}"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
          body: |
            ## Auto Mouse Move - Release ${{ github.ref_name }}
            
            This release includes macOS executables for both Intel and Apple Silicon architectures.
            
            ### üì• Downloads
            - **üçé macOS (Intel)**: Download `telek-macos-x86_64.zip`
            - **üçé macOS (Apple Silicon)**: Download `telek-macos-arm64.zip`
            
            ### üöÄ Features
            - Prevents macOS system idle by moving mouse cursor
            - System tray integration with native macOS appearance
            - Configurable movement patterns and idle detection
            - Optimized for macOS 15+ with proper idle detection
            - Process name spoofing for privacy
            
            ### üìã Installation
            1. Download the appropriate file for your Mac:
               - **Intel Macs**: Download the x86_64 version
               - **Apple Silicon Macs (M1/M2/M3)**: Download the arm64 version
            2. Extract the zip file
            3. Run the .app file
            4. Grant accessibility permissions when prompted
            
            ### üîí macOS Permissions
            The app requires accessibility permissions to function properly:
            1. Go to System Preferences ‚Üí Security & Privacy ‚Üí Privacy
            2. Select "Accessibility" from the left sidebar
            3. Click the lock to make changes
            4. Add the app and ensure it's enabled
            
            ### ‚ö†Ô∏è Security Note
            Some antivirus software may flag PyInstaller executables as suspicious. This is a false positive common with packaged Python applications. The source code is available for review in this repository.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}